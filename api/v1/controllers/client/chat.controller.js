const axios = require("axios");
const Chat = require("../../models/chat.model");
const Tour = require("../../models/tour.model");

// [POST]/api/v1/chats
module.exports.getChatResponse = async (req, res) => {
    try {
        const { message } = req.body;
        const isLoggedIn = !!req.user;
        const userId = isLoggedIn ? req.user._id : null;

        if (!message) {
            return res.status(400).json({ error: "Message is required" });
        }

        // Danh s√°ch ch·ªß ƒë·ªÅ b·ªã ch·∫∑n
        const invalidTopics = ["b√≥ng ƒë√°", "c√¥ng ngh·ªá", "n·∫•u ƒÉn", "to√°n h·ªçc", "xe c·ªô"];
        if (invalidTopics.some(topic => message.toLowerCase().includes(topic))) {
            return res.json({ reply: "M√¨nh ch·ªâ h·ªó tr·ª£ v·ªÅ du l·ªãch th√¥i nh√©! üöÄ" });
        }

        // G·ª£i √Ω tour
        const currentDate = new Date();
        const month = currentDate.getMonth() + 1;
        const year = currentDate.getFullYear();

        let suggestedTours = "";
        const tours = await Tour.find().limit(5).select("title price");;
        if (tours.length > 0) {
            suggestedTours = "D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë tour b·∫°n c√≥ th·ªÉ tham kh·∫£o:\n" +
                tours.map(tour => `- ${tour.title} (${tour.price} VND)`).join("\n");
        }

        // T·∫°o messages
        let history = [{ role: "user", content: message }];
        if (isLoggedIn) {
            let chat = await Chat.findOne({ userId });
            if (!chat) {
                chat = new Chat({ userId, history: [] });
            }
            chat.history.push({ role: "user", content: message });
            history = chat.history;

            // ƒê∆∞a system prompt l√™n ƒë·∫ßu
            history = [
                {
                    role: "system",
                    content: `B·∫°n l√† tr·ª£ l√Ω du l·ªãch. Th√°ng ${month}/${year}.
                    Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin t√¥i cung c·∫•p ƒë·ªÉ g·ª£i √Ω ƒëi·ªÉm ƒë·∫øn, l·ªãch tr√¨nh v√† m·∫πo du l·ªãch. Tr·∫£ l·ªùi th·∫≠t ng·∫Øn g·ªçn v√† s√∫c t√≠ch.
                    Kh√¥ng l·∫•y th√¥ng tin b√™n ngo√†i, kh√¥ng nh·∫Øc ƒë·∫øn th∆∞∆°ng hi·ªáu hay website.\n${suggestedTours}`
                },
                ...chat.history,
            ];

            const response = await axios.post(
                "https://openrouter.ai/api/v1/chat/completions",
                {
                    model: "deepseek/deepseek-r1:free",
                    messages: history,
                },
                {
                    headers: {
                        "Authorization": `Bearer ${process.env.OPENROUTER_API_KEY}`,
                        "HTTP-Referer": "http://localhost:3000",
                        "X-Title": "GoTravel",
                        "Content-Type": "application/json",
                    },
                }
            );

            const reply = response.data.choices?.[0]?.message?.content || "No response received.";
            chat.history.push({ role: "assistant", content: reply });
            await chat.save();

            return res.json({ reply });
        } else {
            // Kh√°ch v√£ng lai ‚Äî kh√¥ng l∆∞u v√†o DB
            const tempMessages = [
                {
                    role: "system",
                    content: `B·∫°n l√† tr·ª£ l√Ω du l·ªãch. Th√°ng ${month}/${year}.
                    Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin t√¥i cung c·∫•p ƒë·ªÉ g·ª£i √Ω ƒëi·ªÉm ƒë·∫øn, l·ªãch tr√¨nh v√† m·∫πo du l·ªãch. Tr·∫£ l·ªùi th·∫≠t ng·∫Øn g·ªçn v√† s√∫c t√≠ch.
                    Kh√¥ng l·∫•y th√¥ng tin b√™n ngo√†i, kh√¥ng nh·∫Øc ƒë·∫øn th∆∞∆°ng hi·ªáu hay website.\n${suggestedTours}`
                },
                { role: "user", content: message }
            ];

            const response = await axios.post(
                "https://openrouter.ai/api/v1/chat/completions",
                {
                    model: "deepseek/deepseek-r1:free",
                    messages: tempMessages,
                },
                {
                    headers: {
                        "Authorization": `Bearer ${process.env.OPENROUTER_API_KEY}`,
                        "HTTP-Referer": "http://localhost:3000",
                        "X-Title": "GoTravel",
                        "Content-Type": "application/json",
                    },
                }
            );

            const reply = response.data.choices?.[0]?.message?.content || "No response received.";
            return res.json({ reply });
        }

    } catch (error) {
        console.error("Error calling OpenRouter API:", error.message);
        res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra!" });
    }
};


// [PATCH]/api/v1/chats/clear
module.exports.clearChat = async (req, res) => {
    try {
        const userId = req.user._id;
        await Chat.updateOne({
            userId: userId
        }, {
            $set: {
                history: []
            }
        });
        res.json({
            code: 200,
            message: "X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán th√†nh c√¥ng!"
        });
    } catch (error) {
        res.json({
            code: 500,
            message: error
        });
    }
}