const axios = require("axios");
const stringSimilarity = require("string-similarity");
const Chat = require("../../models/chat.model");
const Tour = require("../../models/tour.model");
const CachedResponse = require("../../models/CachedResponse");

const invalidTopics = [
    "b√≥ng ƒë√°", "b√≥ng r·ªï", "b√≥ng chuy·ªÅn", "tennis", "c·∫ßu l√¥ng", "v√µ thu·∫≠t", "th·ªÉ thao",
    "c√¥ng ngh·ªá", "l·∫≠p tr√¨nh", "m√°y t√≠nh", "ai", "tr√≠ tu·ªá nh√¢n t·∫°o", "robot", "ph·∫ßn m·ªÅm", "ph·∫ßn c·ª©ng",
    "√¢m nh·∫°c", "ca sƒ©", "nh·∫°c sƒ©", "b√†i h√°t", "b·∫£n nh·∫°c", "rap", "phim", "di·ªÖn vi√™n", "truy·ªÅn h√¨nh", "showbiz", "ca nh·∫°c", "manga", "anime", "truy·ªán tranh", "game", "tr√≤ ch∆°i",
    "n·∫•u ƒÉn", "m√≥n ƒÉn", "·∫©m th·ª±c", "b·∫øp n√∫c", "c√¥ng th·ª©c", "ƒë·∫ßu b·∫øp",
    "to√°n h·ªçc", "v·∫≠t l√Ω", "h√≥a h·ªçc", "sinh h·ªçc", "khoa h·ªçc", "l·ªãch s·ª≠", "ƒë·ªãa l√Ω", "ng√¥n ng·ªØ", "vƒÉn h·ªçc", "gi√°o d·ª•c",
    "xe m√°y", "√¥ t√¥", "xe c·ªô", "ph∆∞∆°ng ti·ªán", "xe ƒë·∫°p", "xe t·∫£i", "m√¥ t√¥",
    "ch√≠nh tr·ªã", "t√¥n gi√°o", "chi·∫øn tranh", "bi·ªÉu t√¨nh", "x√£ h·ªôi", "ph√°p lu·∫≠t", "ch·ª©ng kho√°n", "ti·ªÅn ƒëi·ªán t·ª≠", "bitcoin", "crypto",
    "t·∫≠p gym", "ch·∫°y b·ªô", "s·ª©c kh·ªèe", "dinh d∆∞·ª°ng", "b·ªánh", "thu·ªëc", "b√°c sƒ©", "y t·∫ø", "th·ªÉ h√¨nh", "ch·∫ø ƒë·ªô ƒÉn",
    "t√¨nh y√™u", "ng∆∞·ªùi y√™u", "b·∫°n trai", "b·∫°n g√°i", "t√¢m s·ª±", "m·ªëi quan h·ªá",
    "b·∫°n l√† ai", "t√™n b·∫°n l√† g√¨", "ai t·∫°o ra b·∫°n", "openai", "chatgpt", "ngu·ªìn d·ªØ li·ªáu", "t·ª± h·ªçc"
];

function extractMonthFromMessage(message) {
    const lower = message.toLowerCase();
    const now = new Date();

    const monthMatch = lower.match(/th√°ng (\d{1,2})/);
    if (monthMatch) {
        const parsed = parseInt(monthMatch[1]);
        if (parsed >= 1 && parsed <= 12) return parsed;
    }

    // "th√°ng sau"
    if (lower.includes("th√°ng sau")) {
        return ((now.getMonth() + 1) % 12) + 1;
    }

    // "th√°ng n√†y"
    if (lower.includes("th√°ng n√†y")) {
        const day = now.getDate();
        const bufferDays = 2;

        if (day <= bufferDays) {
            const adjustedDate = new Date(now.getFullYear(), now.getMonth() - 1);
            return adjustedDate.getMonth() + 1;
        }

        return now.getMonth() + 1;
    }

    return null;
}


function normalizeText(text) {
    return text
        .toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "");
}

module.exports.getChatResponse = async (req, res) => {
    try {
        const { message } = req.body;
        const isLoggedIn = !!req.user;
        const userId = isLoggedIn ? req.user._id : null;

        if (!message) {
            return res.status(400).json({ error: "Message is required" });
        }

        // Danh s√°ch ch·ªß ƒë·ªÅ b·ªã ch·∫∑n
        const normalizedMsg = normalizeText(message);
        if (invalidTopics.some(topic => normalizedMsg.includes(normalizeText(topic)))) {
            return res.json({ reply: "M√¨nh ch·ªâ h·ªó tr·ª£ v·ªÅ du l·ªãch th√¥i nh√©! üöÄ" });
        }


        const suggestWebsiteKeywords = [
            "gi·ªõi thi·ªáu website du l·ªãch",
            "trang web du l·ªãch",
            "website du l·ªãch n√†o",
            "web du l·ªãch",
            "cho t√¥i m·ªôt trang du l·ªãch",
            "t∆∞ v·∫•n website du l·ªãch",
            "gi·ªõi thi·ªáu trang web v·ªÅ du l·ªãch",
            "c√≥ trang web du l·ªãch n√†o kh√¥ng",
            "Gi·ªõi thi·ªáu cho t√¥i v·ªÅ 1 web du l·ªãch"
        ];

        const isSuggestingWebsite = suggestWebsiteKeywords.some(keyword =>
            normalizedMsg.includes(normalizeText(keyword))
        );

        if (isSuggestingWebsite) {
            return res.json({
                reply: "B·∫°n c√≥ th·ªÉ truy c·∫≠p website ch√≠nh th·ª©c c·ªßa ch√∫ng t√¥i  ƒë·ªÉ kh√°m ph√° c√°c tour du l·ªãch h·∫•p d·∫´n nh√©! üåç‚ú®"
            });
        }

        // Check cache tr∆∞·ªõc
        const allCached = await CachedResponse.find({
            createdAt: { $gte: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000) }
        });

        const match = allCached.find(item =>
            stringSimilarity.compareTwoStrings(item.question, message) > 0.85
        );

        if (match) {
            return res.json({ reply: match.answer });
        }

        // G·ª£i √Ω tour
        const currentDate = new Date();
        const month = currentDate.getMonth() + 1;
        const year = currentDate.getFullYear();

        let suggestedTours = "";
        const tours = await Tour.find().select("title price");
        if (tours.length > 0) {
            suggestedTours = "D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë tour b·∫°n c√≥ th·ªÉ tham kh·∫£o:\n" +
                tours.map(tour => `- ${tour.title} (${tour.price} VND)`).join("\n");
        }

        const extractedMonth = extractMonthFromMessage(message);
        const targetMonth = extractedMonth || (new Date().getMonth() + 1);

        const systemPrompt = {
            role: "system",
            content: `B·∫°n l√† tr·ª£ l√Ω du l·ªãch.H√£y d·ª±a v√†o th√°ng ${targetMonth}/${year} ƒë·ªÉ tr·∫£ l·ªùi nh√©!.
            Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin t√¥i cung c·∫•p ƒë·ªÉ g·ª£i √Ω ƒëi·ªÉm ƒë·∫øn, l·ªãch tr√¨nh v√† m·∫πo du l·ªãch. Tr·∫£ l·ªùi th·∫≠t ng·∫Øn g·ªçn v√† s√∫c t√≠ch.
            Kh√¥ng l·∫•y th√¥ng tin b√™n ngo√†i.Ch·ªâ l·∫•y th√¥ng tin website GoTravel c·ªßa ch√∫ng t√¥i.\n${suggestedTours}`
        };

        let messages = [systemPrompt, { role: "user", content: message }];

        if (isLoggedIn) {
            let chat = await Chat.findOne({ userId });
            if (!chat) chat = new Chat({ userId, history: [] });

            chat.history.push({ role: "user", content: message });
            messages = [systemPrompt, ...chat.history];
        }

        const response = await axios.post(
            "https://openrouter.ai/api/v1/chat/completions",
            {
                model: "deepseek/deepseek-r1:free",
                messages: messages,
            },
            {
                headers: {
                    "Authorization": `Bearer ${process.env.OPENROUTER_API_KEY}`,
                    "HTTP-Referer": "http://localhost:3000",
                    "X-Title": "GoTravel",
                    "Content-Type": "application/json",
                },
            }
        );

        const reply = response.data.choices?.[0]?.message?.content || "No response received.";

        // L∆∞u cache
        await CachedResponse.create({
            question: message,
            answer: reply
        });

        if (isLoggedIn) {
            const chat = await Chat.findOne({ userId });
            chat.history.push({ role: "assistant", content: reply });
            await chat.save();
        }

        return res.json({ reply });

    } catch (error) {
        console.error("Error:", error.message);
        res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra!" });
    }
};

// [PATCH]/api/v1/chats/clear
module.exports.clearChat = async (req, res) => {
    try {
        const userId = req.user._id;
        await Chat.updateOne({
            userId: userId
        }, {
            $set: {
                history: []
            }
        });
        res.json({
            code: 200,
            message: "X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán th√†nh c√¥ng!"
        });
    } catch (error) {
        res.json({
            code: 500,
            message: error
        });
    }
}